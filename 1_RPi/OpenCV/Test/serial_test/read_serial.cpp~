#include <stdio.h>
#include <iostream>
#include <unistd.h>
#include <fcntl.h>
#include <termios.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>

#define BAUDRATE B115200
#define DEVICE "/dev/ttyO1"
#define FALSE 0
#define TRUE 1

using namespace std;

int main(void)
{
  int fd;
  struct termios oldtio, newtio;

  //open modem device
  fd = open("/dev/ttyO1", O_RDWR | O_NOCTTY | O_NDELAY );
  if (fd < 0) { cout << "Error opening device" << endl; return -1; }
  else cout << "Device opened successfully" << endl;

  tcgetattr(fd, &oldtio); // save current serial port settings
  bzero(&newtio, sizeof(newtio)); // clear struct to recieve new settings

  newtio.c_cflag = BAUDRATE | CRTSCTS | CS8 | CLOCAL | CREAD;
  newtio.c_iflag = IGNPAR | ICRNL;
  newtio.c_oflag = 0;
  newtio.c_lflag = ICANON;

  tcflush(fd, TCIFLUSH);
  tcsetattr(fd, TCSANOW, &newtio);

  int n = 0, spot = 0;
  char buf = '\0';

  char response[1024];
  memset(response, '\0', sizeof response);

  do {
    n = read(fd, &buf, 1);
    sprintf( &response[spot], "%c", buf);
    spot +=n;
  } while (buf != '\r' && n > 0);

  if(n < 0) {
    cout << "Error reading!" << endl;
  }
  else if(n == 0){
    cout << "read nothing!" << endl;
  }
  else {
    cout << "Response: " << response << endl;
  }

  tcsetattr(fd, TCSANOW, &oldtio);
  close(fd);
  return 0;
}
  
